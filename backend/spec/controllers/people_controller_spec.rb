require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
RSpec.describe PeopleController, :type => :controller do
	handle_session


	let(:new_attributes) { FactoryGirl.attributes_for(:person) }


	# This should return the minimal set of attributes required to create a valid
	# Person. As you add validations to Person, be sure to
	# adjust the attributes here as well.
	let(:valid_attributes) { FactoryGirl.attributes_for :person }

	let(:invalid_attributes) {
		FactoryGirl.attributes_for(:invalid_person)
	}

	# This should return the minimal set of values that should be in the session
	# in order to pass any filters (e.g. authentication) defined in
	# PeopleController. Be sure to keep this updated too.


	describe "GET index" do
		context 'when authorized' do
			it 'assigns all people as @people' do
				assign_permission(:read, Person)
				person = Person.create! valid_attributes
				get :index, {}
				expect(assigns(:people)).to include(person)
			end
			it "renders the index template" do
				assign_permission(:read, Person)
				get :index
				expect(response).to render_template("index")
			end
		end
		context 'when not authorized' do
			it 'renders unauthorized' do
				revoke_permission(:read, Person)
				get :index, {}
				expect(assigns(:people)).to eq([])
				expect(response).to have_http_status(401)
			end
		end
	end

	describe "GET show" do
		context 'when authorized' do
			it "assigns the requested person as @person" do
				assign_permission(:read, Person)
				person = Person.create! valid_attributes
				get :show, {:id => person.to_param}
				expect(assigns(:person)).to eq(person)
				expect(response).to have_http_status(200)
				expect(response).to render_template("show")
			end
		end
		context 'when not authorized' do
			it 'renders unauthorized' do
				revoke_permission(:read, Person)
				person = Person.create! valid_attributes
				get :show, {:id => person.to_param}
				expect(response).to have_http_status(401)
			end
		end
	end

	describe "GET new" do
		context 'when authorized' do
			it "assigns a new person as @person" do
				assign_permission(:create, Person)
				get :new, {}
				expect(assigns(:person)).to be_a_new(Person)
			end
		end
		context 'when not authorized' do
			it 'renders unauthorized' do
				revoke_permission(:create, Person)
				get :new
				expect(response).to have_http_status(401)
			end
		end
	end
	describe "GET edit" do
		context 'when authorized' do
			it "assigns the requested person as @person" do
				assign_permission(:update, Person)
				person = Person.create! valid_attributes
				get :edit, {:id => person.to_param}
				expect(assigns(:person)).to eq(person)
			end
		end
		context 'when not authorized' do
			it 'renders unauthorized' do
				revoke_permission(:update, Person)
				person = Person.create! valid_attributes
				get :edit, {:id => person.to_param}
				expect(response).to have_http_status(401)
			end
		end
	end
	describe "POST create" do
		context "when authorized" do
			before(:each) do
				assign_permission(:create, Person)
			end
			describe "with valid params" do
				it "creates a new Person" do
					expect {
						post :create, {:person => valid_attributes}
					}.to change(Person, :count).by(1)
				end

				it "assigns a newly created person as @person" do
					post :create, {:person => valid_attributes}
					expect(assigns(:person)).to be_a(Person)
					expect(assigns(:person)).to be_persisted
				end

				it "redirects to the created person" do
					post :create, {:person => valid_attributes}
					expect(response).to redirect_to(Person.last)
				end
			end
			describe "with invalid params" do
				it "assigns a newly created but unsaved person as @person" do
					post :create, {:person => invalid_attributes}
					expect(assigns(:person)).to be_a_new(Person)
					expect {	post :create, {:person => invalid_attributes}
					}.to change(Person, :count).by(0)
				end

				it "re-renders the 'new' template" do
					post :create, {:person => invalid_attributes}
					expect(response).to render_template("new")
				end
			end
		end
		context "when not authorized" do
			it "renders unauthorized" do
				revoke_permission(:create, Person)
				expect {
					post :create, {:person => valid_attributes}
				}.to change(Person, :count).by(0)
				expect {
					(response).to have_http_status(401)
				}
			end
		end
	end

	describe "PUT update" do
		context "when authorized" do
			before(:each) do
				assign_permission(:update, Person)
			end
			describe "with valid params" do
				it "updates the requested person" do
					person = Person.create! valid_attributes
					put :update, {:id => person.to_param, :person => new_attributes}
					person.reload
					expect(person.name).to eq(new_attributes[:name])
				end

				it "assigns the requested person as @person" do
					person = Person.create! valid_attributes
					put :update, {:id => person.to_param, :person => valid_attributes}
					expect(assigns(:person)).to eq(person)
				end

				it "redirects to the person" do
					person = Person.create! valid_attributes
					put :update, {:id => person.to_param, :person => valid_attributes}
					expect(response).to redirect_to(person)
				end
			end

			describe "with invalid params" do
				it "assigns the person as @person" do
					person = Person.create! valid_attributes
					put :update, {:id => person.to_param, :person => invalid_attributes}
					expect(assigns(:person)).to eq(person)
				end

				it "re-renders the 'edit' template" do
					person = Person.create! valid_attributes
					put :update, {:id => person.to_param, :person => invalid_attributes}
					expect(response).to render_template("edit")
				end
			end
		end
		context "when unauthorized" do
			it "renders unautorized" do
				revoke_permission(:update, Person)
				person=Person.create! valid_attributes
				put :update, {:id => person.to_param, :person => new_attributes}
				expect(response).to have_http_status(401)
			end
		end
	end
	describe "DELETE destroy" do
		context "when authorized" do
			it "destroys the requested person" do
				assign_permission(:destroy, Person)
				person = Person.create! valid_attributes
				expect {
					delete :destroy, {:id => person.to_param}
				}.to change(Person, :count).by(-1)
			end

			it "redirects to the people list" do
				assign_permission(:destroy, Person)
				person = Person.create! valid_attributes
				delete :destroy, {:id => person.to_param}
				expect(response).to redirect_to(people_url)
			end
		end
		context "when not authorized" do
			it "renders unauthorized" do
				revoke_permission(:destroy, Person)
				person = Person.create! valid_attributes
				expect {
					delete :destroy, {:id => person.to_param}
				}.to change(Person, :count).by(0)
				expect(response).to have_http_status(401)
			end
		end
	end
end
